<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<groupId>com.keytiles.tool</groupId>
	<artifactId>jbehave-bdd-test-suite</artifactId>
	<version>1.1.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>jbehave-bdd-test-suite</name>
	<description>This tool can be used to put together integration tests against a specific service</description>

    <licenses>
        <license>
            <name>Apache License 2.0</name>
            <url>https://opensource.org/licenses/Apache-2.0</url>
        </license>
    </licenses>

	<distributionManagement>
		<repository>
			<id>keytiles-public-releases</id>
			<name>Keytiles Nexus Public Releases repo</name>
			<url>https://nexus.keytiles.com/nexus/content/repositories/public-releases/</url>
		</repository>
		<snapshotRepository>
			<id>keytiles-public-snapshots</id>
			<name>Keytiles Nexus Public Snapshots repo</name>
			<url>https://nexus.keytiles.com/nexus/content/repositories/public-snapshots/</url>
		</snapshotRepository>
	</distributionManagement>	

	<properties>
		<java.version>20</java.version>
		<maven.compiler.source>20</maven.compiler.source>
		<maven.compiler.target>20</maven.compiler.target>
		
		<!-- the class to start with its main() method in the jar -->
		<mainClass>com.keytiles.bdd.ServiceTesterCmd</mainClass>

		<spring.version>6.0.10</spring.version>
		<logback.version>1.4.8</logback.version>
		<bdd.testsuite.version>0.2.0-SNAPSHOT</bdd.testsuite.version>
	</properties>

	<dependencies>

		<!-- https://mvnrepository.com/artifact/junit/junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.12.0</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.13.0</version>
		</dependency>
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>1.5.0</version>
		</dependency>


		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>2.0.7</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>

		<dependency>
			<groupId>com.sixt.tool</groupId>
			<artifactId>bdd-testsuite-java-core</artifactId>
			<version>${bdd.testsuite.version}</version>
		</dependency>

	</dependencies>

	<build>
	
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<targetPath>test-resources</targetPath>
			</testResource>
			<testResource>
				<directory>src/test/stories</directory>
				<filtering>false</filtering>
			</testResource>
		</testResources>

		<plugins>
			
			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<!-- <version>${maven.jar.plugin}</version> -->
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib</classpathPrefix>
							<mainClass>${mainClass}</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<!-- we can use the Shade plugin to build a fat jar the way it is not screwing up
                 Spring important resource files by applying overwrite policy but merging them -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
<!--				<version>${maven.shade.plugin}</version>-->
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>

							<createSourcesJar>false</createSourcesJar>
							<!-- by default the plugin is replacing the .jar with the shaded version
                                 however if you uncomment the below then instead of this
                                 we gaet a *-shaded.jar instead - next to the original slim .jar
                            <shadedClassifierName>shaded</shadedClassifierName>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            -->

							<!-- 								<artifactSet> -->
							<!-- 									<excludes> -->
							<!-- 										<exclude>classworlds:classworlds</exclude> -->
							<!-- 										<exclude>junit:junit</exclude> -->
							<!-- 										<exclude>jmock:*</exclude> -->
							<!-- 										<exclude>*:xml-apis</exclude> -->
							<!-- 										<exclude>org.apache.maven:lib:tests</exclude> -->
							<!-- 										<exclude>log4j:log4j:jar:</exclude> -->
							<!-- 									</excludes> -->
							<!-- 								</artifactSet> -->

							<filters>
								<filter>
									<artifact>*:*</artifact>
									<excludes>
										<exclude>META-INF/ASL2*</exclude>
										<exclude>META-INF/NOTICE*</exclude>
										<exclude>META-INF/LICENSE*</exclude>
										<exclude>META-INF/license*</exclude>
										<exclude>META-INF/*.txt</exclude>
										<exclude>META-INF/*.md</exclude>
									</excludes>
								</filter>
							</filters>

							<transformers>
								<!--  add Main-Class to manifest file -->
								<transformer
										implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>${mainClass}</mainClass>
									<!-- 										<X-Compile-Source-JDK>${maven.compile.source}</X-Compile-Source-JDK> -->
									<!--                     					<X-Compile-Target-JDK>${maven.compile.target}</X-Compile-Target-JDK> -->
								</transformer>
								<!-- when it comes to Spring important resource files instead of overwrite
                                     we join them together -->
								<transformer
										implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>META-INF/spring.handlers</resource>
								</transformer>
								<transformer
										implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>META-INF/spring.schemas</resource>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
			
	</build>

</project>
